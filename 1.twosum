Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].


code:

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int numsl = nums.length;
        
        for(int i=0;i<numsl;i++){
            for(int j=i+1;j<numsl;j++){
                if((nums[i]+nums[j])==target){
                    
                    return new int[] {i,j};
                    }
                
                }
            }
        return new int[] {0};
     }
    
    }
       Desc:
    Runtime: 19 ms, faster than 29.73% of Java online submissions for Two Sum.
Memory Usage: 36.5 MB, less than 99.69% of Java online submissions for Two Sum.



Code 2:
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int numsl = nums.length;
        
        for(int i=0;i<numsl;i++){
            for(int j=i+1;j<numsl;j++){
                if(nums[j]==target-nums[i]){
                    
                    return new int[] {i,j};
                    }
                
                }
            }
        return new int[] {0};
     }
    
    }

    
    
    Desc:Runtime: 14 ms, faster than 44.60% of Java online submissions for Two Sum.
Memory Usage: 36.6 MB, less than 99.69% of Java online submissions for Two Sum.
